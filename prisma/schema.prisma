// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  userName     String @unique
  passWord     String
  name         String
  phoen        String
  address      String
  roleId       Int
  packageId    Int?
  laundryId    Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  role         Role      @relation(fields: [roleId], references: [id])
  Package      Package?  @relation(fields: [packageId], references: [id])
  laundry      Laundry?  @relation("employ", fields: [laundryId], references: [id])
  ownerlaundry Laundry[] @relation("owner")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      RoleName
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model Package {
  id               Int      @id @default(autoincrement())
  name             String
  description      String
  price            Float
  numberOfLanudary Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  User             User[]
}

model Laundry {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ownerId   Int

  Customer Customer[]
  owner    User       @relation("owner", fields: [ownerId], references: [id])
  User     User[]     @relation("employ")
}

model Clothes {
  id        Int       @id @default(autoincrement())
  laundryId Int
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Service   Service[]
}

model Service {
  id             Int              @id @default(autoincrement())
  clothesId      Int
  serviceTypeId  Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  clothes        Clothes          @relation(fields: [clothesId], references: [id])
  serviceType    ServiceType      @relation(fields: [serviceTypeId], references: [id])
  cost           Float
  WashingService WashingService[]
}

model ServiceType {
  id        Int       @id @default(autoincrement())
  laundryId Int
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Service   Service[]
}

model Customer {
  id           Int      @id @default(autoincrement())
  name         String
  customerCode String
  phoen        String
  laundryId    Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  laundry      Laundry  @relation(fields: [laundryId], references: [id])
  Bills        Bills[]
}

model Scot {
  id        Int      @id @default(autoincrement())
  scot      Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bills {
  id         Int      @id @default(autoincrement())
  customerId Int
  washingId  Int      @unique
  total      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id])
  washing    Washing  @relation(fields: [washingId], references: [id])
}

model Washing {
  id                Int              @id @default(autoincrement())
  customerId        Int
  status            WashingStatus
  totalWithoutTax   Float
  totalIncludingTax Float
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  Bills             Bills?
  WashingService    WashingService[]
}

model WashingService {
  id        Int     @id @default(autoincrement())
  serviceId Int
  washingId Int
  service   Service @relation(fields: [serviceId], references: [id])
  washing   Washing @relation(fields: [washingId], references: [id])
}

enum WashingStatus {
  DOEN
  PROCESSING
}

enum RoleName {
  ADMIN
  USPER_ADMIN
  EMPLOY
}
